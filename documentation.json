[
  {
    "name": "IndexedDB",
    "comment": " This library enables access to [IndexedDB] in pure elm.\n\n[IndexedDB]: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n\n# Types\n\n@docs Db\n\n# Functions\n\n@docs open, transaction\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Db",
        "comment": " An indexedDB database\n\nAn *opaque type* that can only be used in functions from this library.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "open",
        "comment": " Open an indexedDB database.\n\nThe database will be created if it does not already exist.\n",
        "type": "String -> Int -> (Int -> Int -> List IndexedDB.Upgrades.Operation) -> Task.Task IndexedDB.Error.Error IndexedDB.Db"
      },
      {
        "name": "transaction",
        "comment": " Execute a database transaction.\n",
        "type": "IndexedDB.Db -> IndexedDB.Data.Transaction -> Task.Task IndexedDB.Error.Error (List (Maybe.Maybe Json.Encode.Value))"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "IndexedDB.Data",
    "comment": " This module contains the possible data operations.\n\n# Types\n\n@docs Transaction, Operation, KeyRange, Response\n",
    "aliases": [
      {
        "name": "Response",
        "comment": " The response to an operation.\n\nWill be `Just val` for certain operations and `Nothing` for others TODO doc\n",
        "args": [],
        "type": "Maybe.Maybe Json.Encode.Value"
      },
      {
        "name": "Transaction",
        "comment": " A database transaction\n\nEither all operations succeed or all operations fail\n",
        "args": [],
        "type": "List ( String, IndexedDB.Data.Operation )"
      }
    ],
    "types": [
      {
        "name": "KeyRange",
        "comment": " A range of keys. Used in object store operations\n\nIn all cases, bool means exclusive greater-than or less-than (i.e. not equal\nto)\n\nIn `Bound`, the first value is the lower bound and the last value is the upper\nbound\n",
        "args": [],
        "cases": [
          [
            "UpperBound",
            [
              "Json.Encode.Value",
              "Bool"
            ]
          ],
          [
            "LowerBound",
            [
              "Json.Encode.Value",
              "Bool"
            ]
          ],
          [
            "Bound",
            [
              "Json.Encode.Value",
              "Json.Encode.Value",
              "Bool",
              "Bool"
            ]
          ],
          [
            "Only",
            [
              "Json.Encode.Value"
            ]
          ]
        ]
      },
      {
        "name": "Operation",
        "comment": " A read or write operation on a store\n\n\n",
        "args": [],
        "cases": [
          [
            "Add",
            [
              "Json.Encode.Value",
              "Maybe.Maybe Json.Encode.Value"
            ]
          ],
          [
            "Clear",
            []
          ],
          [
            "Delete",
            [
              "IndexedDB.Data.KeyRange"
            ]
          ],
          [
            "Put",
            [
              "Json.Encode.Value",
              "Maybe.Maybe Json.Encode.Value"
            ]
          ],
          [
            "Get",
            [
              "IndexedDB.Data.KeyRange"
            ]
          ],
          [
            "GetAll",
            []
          ],
          [
            "Count",
            [
              "Maybe.Maybe IndexedDB.Data.KeyRange"
            ]
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "IndexedDB.Upgrades",
    "comment": " This module contains the possible upgrade operations to a database.\n\nIt is used when creating an upgrade function `Int -> Int -> List Operation`\n\n# Types\n\n@docs Operation, ObjectStoreOptions, KeyPath\n",
    "aliases": [
      {
        "name": "ObjectStoreOptions",
        "comment": " Possible options when creating an object store\n",
        "args": [],
        "type": "{ keyPath : IndexedDB.Upgrades.KeyPath, autoIncrement : Bool }"
      }
    ],
    "types": [
      {
        "name": "KeyPath",
        "comment": " Possible types of keyPath for an object store/index\n",
        "args": [],
        "cases": [
          [
            "NoKeyPath",
            []
          ],
          [
            "SingleKeyPath",
            [
              "String"
            ]
          ],
          [
            "MultiKeyPath",
            [
              "List String"
            ]
          ]
        ]
      },
      {
        "name": "Operation",
        "comment": " A change to a database\n",
        "args": [],
        "cases": [
          [
            "AddObjectStore",
            [
              "IndexedDB.Common.StoreName",
              "IndexedDB.Upgrades.ObjectStoreOptions"
            ]
          ],
          [
            "DeleteObjectStore",
            [
              "IndexedDB.Common.StoreName"
            ]
          ],
          [
            "AddIndex",
            [
              "IndexedDB.Common.StoreName",
              "IndexedDB.Common.IndexName",
              "IndexedDB.Upgrades.KeyPath",
              "IndexedDB.Upgrades.IndexOptions"
            ]
          ],
          [
            "DeleteIndex",
            [
              "IndexedDB.Common.StoreName",
              "IndexedDB.Common.IndexName"
            ]
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  }
]